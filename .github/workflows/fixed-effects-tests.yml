name: Fixed Effects Tests

on:
  push:
    branches: [ "*" ]
    paths:
      - 'jaxonometrics/linear.py'
      - 'jaxonometrics/demean.py'
      - 'tests/test_fe.py'
      - '.github/workflows/fixed-effects-tests.yml'
  pull_request:
    branches: [ "*" ]
    paths:
      - 'jaxonometrics/linear.py'
      - 'jaxonometrics/demean.py'
      - 'tests/test_fe.py'
      - '.github/workflows/fixed-effects-tests.yml'

jobs:
  test-fixed-effects:
    name: Fixed Effects Compatibility Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -e .
        pip install pyfixest pandas

    - name: Verify pyfixest JAX backend
      run: |
        python -c "
        import pyfixest as pf
        import numpy as np
        import pandas as pd
        
        # Test that pyfixest JAX backend is available
        np.random.seed(42)
        df = pd.DataFrame({
            'y': np.random.randn(100),
            'x': np.random.randn(100),
            'fe': np.repeat(range(10), 10)
        })
        
        try:
            model = pf.feols('y ~ x | fe', df, demeaner_backend='jax')
            print('✓ pyfixest JAX backend is working')
        except Exception as e:
            print(f'✗ pyfixest JAX backend error: {e}')
            exit(1)
        "

    - name: Run fixed effects tests
      run: |
        python -m pytest tests/test_fe.py -v --tb=short

    - name: Test FE precision vs pyfixest
      run: |
        python -c "
        import numpy as np
        import pandas as pd
        import jax.numpy as jnp
        import pyfixest as pf
        from jaxonometrics import LinearRegression
        
        print('Testing FE precision against pyfixest...')
        
        # Generate test data
        np.random.seed(42)
        n_obs = 1000
        X = np.random.randn(n_obs, 2)
        group_ids = np.repeat(np.arange(50), 20)
        y = X @ np.array([0.5, -0.3]) + np.random.randn(n_obs) * 0.1
        
        # Convert to JAX
        X_jax = jnp.asarray(X)
        y_jax = jnp.asarray(y)
        group_jax = jnp.asarray(group_ids, dtype=jnp.int32)
        
        # jaxonometrics
        jax_model = LinearRegression(solver='lineax')
        jax_model.fit(X_jax, y_jax, fe=[group_jax])
        jax_coef = jax_model.params['coef']
        
        # pyfixest
        df = pd.DataFrame({
            'y': y, 'x1': X[:, 0], 'x2': X[:, 1], 'group': group_ids
        })
        pf_model = pf.feols('y ~ x1 + x2 | group', df, demeaner_backend='jax')
        pf_coef = pf_model.coef().values
        
        # Check precision
        max_diff = np.max(np.abs(jax_coef - pf_coef))
        print(f'Max coefficient difference: {max_diff:.2e}')
        
        tolerance = 1e-8
        if max_diff < tolerance:
            print(f'✓ Precision test PASSED (diff < {tolerance:.0e})')
        else:
            print(f'✗ Precision test FAILED (diff >= {tolerance:.0e})')
            exit(1)
        "

    - name: Test multiple FE combinations
      run: |
        python -c "
        import numpy as np
        import pandas as pd
        import jax.numpy as jnp
        from jaxonometrics import LinearRegression
        
        print('Testing multiple FE combinations...')
        
        np.random.seed(42)
        n_firms, n_years = 100, 10
        n_obs = n_firms * n_years
        
        firm_id = np.repeat(np.arange(n_firms), n_years)
        year_id = np.tile(np.arange(n_years), n_firms)
        X = np.random.randn(n_obs, 2)
        y = np.random.randn(n_obs)
        
        # Convert to JAX
        X_jax = jnp.asarray(X)
        y_jax = jnp.asarray(y)
        firm_jax = jnp.asarray(firm_id, dtype=jnp.int32)
        year_jax = jnp.asarray(year_id, dtype=jnp.int32)
        
        # Test various FE combinations
        fe_tests = [
            ([firm_jax], 'Firm FE'),
            ([year_jax], 'Year FE'),
            ([firm_jax, year_jax], 'Two-way FE')
        ]
        
        for fe_vars, description in fe_tests:
            model = LinearRegression(solver='lineax')
            model.fit(X_jax, y_jax, fe=fe_vars)
            coef = model.params['coef']
            print(f'✓ {description}: {len(coef)} coefficients')
        
        print('✓ All FE combination tests passed!')
        "

  benchmark-fe:
    name: Fixed Effects Performance Benchmark
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pyfixest pandas

    - name: Benchmark FE performance
      run: |
        python -c "
        import time
        import numpy as np
        import pandas as pd
        import jax.numpy as jnp
        import pyfixest as pf
        from jaxonometrics import LinearRegression
        
        print('Benchmarking Fixed Effects Performance...')
        
        # Generate larger dataset
        np.random.seed(42)
        n_firms, n_years = 500, 20
        n_obs = n_firms * n_years
        
        firm_id = np.repeat(np.arange(n_firms), n_years)
        year_id = np.tile(np.arange(n_years), n_firms)
        X = np.random.randn(n_obs, 3)
        y = np.random.randn(n_obs)
        
        print(f'Dataset: {n_obs:,} observations, {n_firms} firms, {n_years} years')
        
        # jaxonometrics benchmark
        X_jax = jnp.asarray(X)
        y_jax = jnp.asarray(y)
        firm_jax = jnp.asarray(firm_id, dtype=jnp.int32)
        year_jax = jnp.asarray(year_id, dtype=jnp.int32)
        
        start_time = time.time()
        jax_model = LinearRegression(solver='lineax')
        jax_model.fit(X_jax, y_jax, fe=[firm_jax, year_jax])
        jax_time = time.time() - start_time
        
        # pyfixest benchmark
        df = pd.DataFrame({
            'y': y, 'x1': X[:, 0], 'x2': X[:, 1], 'x3': X[:, 2],
            'firm_id': firm_id, 'year_id': year_id
        })
        
        start_time = time.time()
        pf_model = pf.feols('y ~ x1 + x2 + x3 | firm_id + year_id', df, demeaner_backend='jax')
        pf_time = time.time() - start_time
        
        print(f'jaxonometrics time: {jax_time:.3f}s')
        print(f'pyfixest time: {pf_time:.3f}s')
        print(f'Speed ratio: {pf_time/jax_time:.2f}x')
        
        # Check if reasonable performance (should complete within 30 seconds)
        if jax_time < 30:
            print('✓ Performance benchmark PASSED')
        else:
            print('✗ Performance benchmark FAILED (too slow)')
            exit(1)
        "
        
    - name: Memory usage test
      run: |
        python -c "
        import psutil
        import os
        import numpy as np
        import jax.numpy as jnp
        from jaxonometrics import LinearRegression
        
        print('Testing memory usage...')
        
        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        # Large dataset
        np.random.seed(42)
        n_obs = 50000
        X = jnp.asarray(np.random.randn(n_obs, 5))
        y = jnp.asarray(np.random.randn(n_obs))
        group_ids = jnp.asarray(np.random.randint(0, 1000, n_obs), dtype=jnp.int32)
        
        model = LinearRegression(solver='lineax')
        model.fit(X, y, fe=[group_ids])
        
        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        memory_used = final_memory - initial_memory
        
        print(f'Memory used: {memory_used:.1f} MB')
        print(f'Memory per observation: {memory_used*1024/n_obs:.2f} KB')
        
        # Should use reasonable amount of memory (less than 2GB)
        if memory_used < 2000:
            print('✓ Memory usage test PASSED')
        else:
            print('✗ Memory usage test FAILED (too much memory)')
            exit(1)
        "